$language "muv"

$author "Revar Desmera <revar@gmail.com>"
$note   "An example replacement for the lsedit program, written in MUV."

$version    1.0
$libversion 1.0


include "!fb6/str";
include "!fb6/array";
include "!fb6/regex";
include "!fb6/prop";
include "!fb6/io";
include "!fb6/argparse";
include "!fb6/match";

using namespace str;

namespace lsedit {

    var help_lines = [];
    var insert_pos;


    public func init_help() {
        help_lines = [];
    }


    public func show_help() {
        const header = [
            "-- Commands: -----------------------------------------------------",
            "..LINE              Insert .LINE at current insertion position.",
            ".h                  Show this help message.",
            ".q                  Quit editor, saving changes.",
            ".x                  Quit editor, aborting changes.",
            ".l                  List all lines.",
            ".l LINE             List given LINE.",
            ".l LINE,LINE        List given LINE range, inclusive.",
            ".i LINE             Move insertion to before LINE.",
            ".d LINE             Delete LINE.",
            ".d LINE,LINE        Delete given LINE range, inclusive.",
            ".f                  Format all lines to 75 columns.",
            ".f LINE,LINE        Format given line range to 75 columns.",
            ".f LINE,LINE=COLS   Format given line range to COLS columns.",
            ".s /FIND/REPL       Substitute regexp FIND with REPL in all lines.",
            ".s LINE/FIND/REPL   Substitute regexp FIND with REPL in LINE.",
            ".s L1,L2/FIND/REPL  Substitute FIND with REPL between L1 and L2.",
            ".w                  Write/Save changes without exiting editor.",
            ".w OBJ=PROP         Write/Save list to OBJ in proplist PROP."
        ];
        const footer = [
            "------------------------------------------------------------------"
        ];
        for (var line in array::concat(header, help_lines, footer)) {
            tell(line);
        }
    }


    public func add_helptext(line) {
        help_lines[] = line;
    }


    func show_list(lines, start, end, pos) {
        for (var lnum => var line in lines) {
            lnum++;
            if (lnum >= start && lnum <= end) {
                tell(fmtstring("%s%3i: %s", (lnum==pos ?">":" "), lnum, line));
            }
        }
	if (pos > count(lines)) {
	    tell(">");
	}
	tell("Done.");
    }


    func list_split_range(lines, start, end) {
        var pfx = [];
        var mid = [];
        var sfx = [];
        for (var idx => var line in lines) {
            idx++;
            if (idx<start) {
                pfx[] = line;
            }
            if (idx>=start && idx<=end) {
                mid[] = line;
            }
            if (idx>end) {
                sfx[] = line;
            }
        }
        return [pfx, mid, sfx];
    }


    func regexp_list_sub(lines, fnd, repl) {
        var changed = 0;
        for (var idx => var line in lines) {
            var newln = regex::sub(line, fnd, repl, regex::ALL|regex::ICASE);
            if (strcmp(newln, line)) {
                lines[idx] = newln;
                changed++;
            }
        }
        return [changed, lines];
    }


    func format_list(lines, cols) {
        var txt = array::join(lines, " ");
        txt = regex::sub(txt, "  *", " ", regex::ALL);
        var out = [];
        while (strlen(txt) > cols) {
            <var pre, txt> = strcut(txt, cols);
            <pre, var rem> = rsplit(pre, " ");
            if (!pre) {
                pre = rem;
                rem = "";
            } else if (strlen(rem) > cols/2) {
                pre = cat(pre, " ", rem);
                rem = "";
            }
            out[] = pre;
            txt = strcat(rem, txt);
        }
        if (strip(txt)) {
            out[] = txt;
        }
        return out;
    }


    func parse_lines(str, line1, line2) {
        if (instr(str, ",")) {
            str = split(str, ",");
            line1 = atoi(str[0]);
            line2 = atoi(str[1]);
        } else if (instr(str, " ")) {
            str = split(str, " ");
            line1 = atoi(str[0]);
            line2 = atoi(str[1]);
        } else if (strip(str)) {
            line1 = line2 = atoi(str);
        }
        return [line1, line2];
    }


    public func editor(lines, obj, prop) {
        var line1 = 0;
        var line2 = 0;
        while(1) {
            if (insert_pos > count(lines)+1) {
                insert_pos = count(lines)+1;
                tell(fmtstring("Inserting at line %i", insert_pos));
            }
            var inln = io::read();
            if (strncmp(inln, ".", 1)) {
                // Line does NOT start with '.', so we just insert it.
                lines = array::insertitem(inln, lines, insert_pos-1);
		insert_pos++;
                continue;
            }
            if (!strncmp(inln, "..", 2)) {
                // Starts with "..", so strip one "." and insert it.
                inln = strcut(inln, 1)[1];
                lines = array::insertitem(inln, lines, insert_pos-1);
		insert_pos++;
                continue;
            }
            <var cmd, var cmdargs> = split(inln, " ");
            switch (cmd using strcmp) {
                case(".h") { show_help(); }
                case(".q") {
                    prop::list_put(obj, prop, lines);
                    tell("Saved.");
                    return [cmd, cmdargs, lines];
                }
                case(".x") {
                    tell("Aborting.");
                    return [cmd, cmdargs, lines];
                }
                case(".l") {
                    <line1, line2> = parse_lines(cmdargs, 1, 999999);
                    show_list(lines, line1, line2, insert_pos);
                }
                case(".i") {
                    <line1, line2> = parse_lines(cmdargs, 1, 1);
                    if (line1 != line2) {
                        tell("Usage: .i LINENUM");
                        break;
                    }
                    insert_pos = line1;
                    if (insert_pos > count(lines)+1) {
                        insert_pos = count(lines)+1;
                    }
                    tell(fmtstring("Inserting at line %i", insert_pos));
                }
                case(".s") {
                    cmdargs = explode(cmdargs, "/");
                    if (count(cmdargs) == 3) {
                        <line1, var fnd, var repl> = cmdargs;
                        <line1, line2> = parse_lines(line1, 1, 999999);
                        if (!line1 || !line2 || !fnd) {
                            tell("Usage: .s [LINE[,LINE]]/FIND/REPLACE");
                            break;
                        }
                        <var pfx, var subbed, var sfx> = list_split_range(lines, line1, line2);
                        <var changed, subbed> = regexp_list_sub(subbed, fnd, repl);
                        lines = array::concat(pfx, subbed, sfx);
                        tell(fmtstring("Changed %i lines.", changed));
			show_list(lines, line1, line2, insert_pos);
                    } else {
                        tell("Usage: .s [LINE[,LINE]]/FIND/REPLACE");
                    }
                }
                case(".d") {
                    var oldcount = count(lines);
                    <line1, line2> = parse_lines(cmdargs, 0, 0);
                    if (!line1 || !line2) {
                        tell("Usage: .d LINENUM [LINENUM]");
                    }
                    lines = array::delrange(lines, line1-1, line2-1);
                    tell(fmtstring("Deleted %i lines.", oldcount - count(lines)));
                    if (insert_pos >= line1) {
                        if (insert_pos > line2) {
                            insert_pos -= line2-line1+1;
                        } else {
                            insert_pos = line1;
                        }
                    }
                    tell(fmtstring("Inserting at line %i", insert_pos));
                }
                case(".w") {
                    cmdargs = explode(cmdargs, "=");
                    if (!cmdargs) {
                        if (obj && prop) {
                            prop::list_put(obj, prop, lines);
                            tell("Saved.");
                        } else {
                            tell("Usage: .w OBJECT=LISTPROP");
                        }
                    } else if (count(cmdargs) == 2) {
                        <var saveobj, var savelist> = cmdargs;
                        saveobj = match_controlled(saveobj);
                        if (saveobj < 0) break;
                        if (!savelist) {
                            tell("Usage: .w [OBJECT=LISTPROP]");
                            break;
                        }
                        prop::list_put(saveobj, savelist, lines);
                        tell("Saved.");
                    } else {
                        tell("Usage: .w [OBJECT=LISTPROP]");
                    }
                }
                case(".f") {
                    <cmdargs, var cols> = split(cmdargs, "=");
                    <line1, line2> = parse_lines(cmdargs, 1, 999999);
                    cols = cols ? atoi(cols) : 75;
                    if (!cols || !line1 || !line2) {
                        tell("Usage: .f [L1,[L2]][=LISTPROP]");
                        break;
                    }
                    <var pfx, var mid, var sfx> = list_split_range(lines, line1, line2);
		    var origcnt = count(mid);
                    mid = format_list(mid, cols);
                    lines = array::concat(pfx, mid, sfx);
                    tell(fmtstring("Formatted %i lines.", origcnt));
                    show_list(lines, line1, line2, insert_pos);
                }
                default {
                    return [cmd, cmdargs, lines];
                }
            }
        }
    }


    public func basic(arg) {
        argparse::init();
        argparse::set_mode("");
        argparse::add_mode("", [], "obj=list");
        var opts = argparse::parse(arg);
        if (!opts) return;
        if (!opts.obj || !opts.list) {
            argparse::show_usage();
            return;
        }

        var obj = match_controlled(opts.obj);
        if (obj < 0) return;

        insert_pos = 1;

        var cmd;
        var args;
        var lines = prop::list_get(obj, opts.list);
        show_list(lines, 1, 999999, insert_pos);

        while(1) {
            <cmd, args, lines> = editor(lines, obj, opts.list);
            if (cmd in [".x", ".q"]) {
                break;
            }
            tell(fmtstring("Unrecognized editor command '%s'.", cmd));
        }

        return [cmd, args, lines];
    }
}


func main(arg) {
    lsedit::init_help();
    return lsedit::basic(arg);
}

