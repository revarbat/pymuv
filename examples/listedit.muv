$language "muv"
$target "fb6"

include "!fb6/array";
include "!fb6/str";
include "!fb6/obj";
include "!fb6/prop";
include "!fb6/io";
include "!fb6/argparse";
include "!fb6/match";


func verify(override, msg) {
    if (override) {
        return 1;
    }
    ftell("Are you sure you want to %s?", msg);
    var lcin = str::tolower(io::read());
    if (str::stringpfx(lcin, "y")) {
        return 1;
    }
    tell("Cancelled.");
    return 0;
}


func handle_mode_list(obj, prop) {
    var lines = prop::list_get(obj, prop);
    for (var i => var line in lines) {
        ftell("%3i: %s", i+1, line);
    }
    tell("Done.");
}


func handle_mode_append(obj, prop, val, force) {
    if (!val) {
        argparse::show_usage();
        return;
    }
    if (verify(force, "append a line to the list")) {
        var lines = prop::list_get(obj, prop);
        lines[] = val;
        prop::list_put(obj, prop, lines);
        tell("Line appended.");
        handle_mode_list(obj, prop);
    }
}


func handle_mode_delete(obj, prop, pos, force) {
    pos = str::atoi(pos);
    if (!pos) {
        argparse::show_usage();
        return;
    }
    if (verify(force, "delete a line from the list")) {
        var lines = prop::list_get(obj, prop);
        lines = array::delitem(lines, pos-1);
        prop::list_put(obj, prop, lines);
        tell("Line deleted.");
        handle_mode_list(obj, prop);
    }
}


func handle_mode_insert(obj, prop, pos, val, force) {
    pos = str::atoi(pos);
    if (!pos || !val) {
        argparse::show_usage();
        return;
    }
    if (verify(force, "insert a line into the list")) {
        var lines = prop::list_get(obj, prop);
        lines = array::insertitem(val, lines, pos-1);
        prop::list_put(obj, prop, lines);
        tell("Line inserted.");
        handle_mode_list(obj, prop);
    }
}


func handle_mode_replace(obj, prop, pos, val, force) {
    pos = str::atoi(pos);
    if (!pos || !val) {
        argparse::show_usage();
        return;
    }
    if (verify(force, "replace a line in the list")) {
        var lines = prop::list_get(obj, prop);
        lines = array::delitem(lines, pos-1);
        lines = array::insertitem(val, lines, pos-1);
        prop::list_put(obj, prop, lines);
        tell("Line inserted.");
        handle_mode_list(obj, prop);
    }
}


func main(arg) {
    argparse::init();

    argparse::set_mode("list");
    argparse::add_mode("list",    [],        "obj=prop");
    argparse::add_mode("append",  ["force"], "obj=prop:val");
    argparse::add_mode("delete",  ["force"], "obj=prop:pos");
    argparse::add_mode("insert",  ["force"], "obj=prop:pos:val");
    argparse::add_mode("replace", ["force"], "obj=prop:pos:val");
    argparse::add_flag("verbose");

    var opts = argparse::parse(arg);
    if (!opts) return;

    if (!opts.obj || !opts.prop) {
        argparse::show_usage();
        return;
    }

    var obj = match_controlled(opts.obj);
    if (obj < 0) return;

    if (opts.verbose) {
        tell(cat("Mode = ", opts.mode));
    }
    switch (opts.mode using eq) {
        case("list")    { handle_mode_list(obj, opts.prop); }
        case("append")  { handle_mode_append(obj, opts.prop, opts.val, opts.force); }
        case("delete")  { handle_mode_delete(obj, opts.prop, opts.pos, opts.force); }
        case("insert")  { handle_mode_insert(obj, opts.prop, opts.pos, opts.val, opts.force); }
        case("replace") { handle_mode_replace(obj, opts.prop, opts.pos, opts.val, opts.force); }
    }
}


